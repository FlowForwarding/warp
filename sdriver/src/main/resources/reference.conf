ofp13 {
    Header {
        type_name = "ofp_header"

        xid = "xid"
    }

    Hello {
        type_name = "ofp_hello"

        header = "header"
        elements = "elements"
    }

    HelloElemVersionBitmap {
        type_name = "ofp_hello_elem_version_bitmap"

        bitmaps = "bitmaps"
    }

    EchoRequest {
        type_name = "echo_request"

        header = "header"
        elements = "elements"
    }

    EchoReply {
        type_name = "echo_reply"

        header = "header"
        elements = "elements"
    }

    Experimenter {
        type_name = "ofp_experimenter_header"

        header = "header"
        data = "data"
        experimenter = "experimenter"
        exp_type = "exp_type"
    }

    SetConfig {
        type_name = "ofp_set_config"

        header = "header"

        flags = "flags"
        miss_send_len = "miss_send_len"
    }

    GetConfigRequest {
        type_name = "ofp_switch_config_request"

        header = "header"
    }

    GetConfigReply {
        type_name = "ofp_switch_config_reply"

        header = "header"

        flags = "flags"
        miss_send_len = "miss_send_len"
    }

    FeaturesRequest {
        type_name = "ofp_switch_features_request"

        header = "header"
    }

    FeaturesReply {
        type_name = "ofp_switch_features_reply"

        header = "header"

        datapath_id = "datapathId"
        n_buffers = "nBuffers"
        n_tables = "nTables"
        auxiliary_id = "auxiliaryId"
        capabilities = "capabilities"
    }

    BarrierReply {
        type_name = "ofp_barrier_reply"

        header = "header"
    }

    BarrierRequest{
        type_name = "ofp_barrier_request"

        header = "header"
    }

    SetAsync {
        type_name = "ofp_set_async"

        header = "header"

        packet_in_mask = "packet_in_mask"
        port_status_mask = "port_status_mask"
        flow_removed_mask = "flow_removed_mask"
    }

    GetAsyncRequest {
        type_name = "ofp_get_async_request"

        header = "header"
    }

    GetAsyncReply {
        type_name = "ofp_get_async_reply"

        header = "header"

        packet_in_mask = "packet_in_mask"
        port_status_mask = "port_status_mask"
        flow_removed_mask = "flow_removed_mask"
    }

    PacketOut {
        type_name = "ofp_packet_out"

        header = "header"

        buffer_id = "buffer_id"
        in_port = "in_port"
        actions = "actions"
        data = "data"
    }

    RoleReply {
        type_name = "ofp_role_reply"

        header = "header"

         generation_id = "generation_id"
         role = "role"
    }

    RoleRequest{
        type_name = "ofp_role_request"

        header = "header"

        generation_id = "generation_id"
        role = "role"
    }

    PacketQueue {
        type_name = "ofp_packet_queue"

        header = "header"

        id = "queue_id"
        port = "port"
        properties = "properties"
    }

    MaxRate {
        type_name = "ofp_queue_prop_max_rate"

        rate = "rate"
    }

    MinRate {
        type_name = "ofp_queue_prop_min_rate"

        rate = "rate"
    }

    ExperimenterProperties {
        type_name = "ofp_queue_prop_experimenter"

        experimenter = "experimenter"
        data = "data"
    }

    QueueGetConfigRequest{
        type_name = "ofp_queue_get_config_request"

        header = "header"

        port = "port"
    }

    QueueGetConfigReply{
        type_name = "ofp_queue_get_config_reply"

        header = "header"

        port = "port"
        queues = "queues"
    }

    Error{
        type_name = "ofp_error_msg"

        header = "header"

        type = "eType"
        code = "eCode"
        data = "data"
    }
    
    FlowRem{  
        type_name = "ofp_flow_removed"

        header = "header"

        cookie = "cookie"
        priority = "priority"
        reason = "reason"
        table_id = "table_id"
        duration_sec =  "duration_sec"
        duration_nsec = "duration_nsec"
        idle_timeout = "idle_timeout"
        hard_timeout = "hard_timeout"
        packet_count = "packet_count"
        byte_count = "byte_count"
        match = "mMatch"
    }

    PacketIn{     
        type_name = "ofp_packet_in"

        header = "header"
          
        buffer_id = "buffer_id" 
        total_len = "total_len" 
        reason = "reason"    
        table_id = "table_id"  
        cookie = "cookie"    
        match = "pMatch"    
        data = "data"
    }

    PortStatus{
        type_name = "ofp_port_status"

        header = "header"

        reason = "reason"
        desc = "desc"
    }

    Bucket{
        type_name = "ofp_bucket"

        length = "len"
        weight = "weight"
        watch_port = "watch_port"
        watch_group = "watch_group"
        actions = "actions"
    }

    GroupMod{
        type_name = "ofp_group_mod"

        header = "header"
        
        command = "command"
        type = "t"
        group_id = "group_id"
        buckets = "buckets"
    }

    PortMod{
        type_name = "ofp_port_mod"

        header = "header"
        
        port_no = "port_no"
        hw_addr = "hw_addr"
        config = "config"
        mask = "mask"
        advertise = "advertise"
    }

    MeterMod{
        type_name = "ofp_meter_mod"

        header = "header"
        
        command = "command"
        flags = "flags"
        meter_id = "meter_id"
        bands = "bands"
    }

    FlowMod{
        type_name = "ofp_flow_mod"

        header = "header"

        cookie = "cookie"
        cookie_mask = "cookie_mask"
        table_id = "table_id"
        command = "command"
        idle_timeout = "idle_timeout"
        hard_timeout = "hard_timeout"
        priority = "priority"
        buffer_id = "buffer_id"
        out_port = "out_port"
        out_group = "out_group"
        flags = "flags"
        match = "m"
        instructions = "instructions"
    }
    
    Port{    
        type_name = "ofp_port"

        header = "header"

        port_no = "port_no"
        hw_addr = "hw_addr"
        name = "name"
        config = "config"
        state = "state"
        curr = "curr"
        advertised = "advertised"
        supported = "supported"
        peer = "peer"
        curr_speed = "curr_speed"
        max_speed = "max_speed"
    }

    MeterBandHeader{
        type_name = "ofp_meter_band_header"

        length = "length"
        rate = "rate"
        burst_size = "burst_size"
    }

    MeterBandDrop{
        type_name = "ofp_meter_band_drop"

        header = "header"
    }

    MeterBandDscpRemark{
        type_name = "ofp_meter_band_dscp_remark"

        header = "header"

        prec_level = "prec_level"
    }

    MeterBandExperimenter{
        type_name = "ofp_meter_band_experimenter"

        header = "header"

        experimenter = "experimenter"
    }

    Match {
        type_name = "ofp_match"

        oxm = "mType"
        length = "length"
        fields = "fields"
    }

    OxmTlv {
        type_name = "oxm_tlv"

        header = "header"
        data = "entry"
    }

    InstructionGotoTable {
        type_name = "ofp_instruction_goto_table"

        length = "length"
        table_id = "table_id"
    }

    InstructionWriteMetadata {
        type_name = "ofp_instruction_write_metadata"

        length = "length"
        metadata = "metadata"
        mask = "metadata_mask"
    }

    InstructionWriteActions {
        type_name = "ofp_instruction_write_actions"

        length = "length"
        actions = "actions"
    }

    InstructionApplyActions {
        type_name = "ofp_instruction_apply_actions"

        length = "length"
        actions = "actions"
    }

    InstructionClearActions {
        type_name = "ofp_instruction_clear_actions"

        length = "length"
        actions = "actions"
    }

    InstructionMeter {
        type_name = "ofp_instruction_meter"

        length = "length"
        meter_id = "meter_id"
    }

    InstructionExperimenter {
        type_name = "ofp_instruction_experimenter"

        length = "length"
        experimenter = "experimenter"
        data = "data"
    }
    
    ActionOutput{
        type_name = "ofp_action_output"
          
        length = "len"
        port = "port"
        max_len = "max_len"
    }
    
    ActionGroup {
        type_name = "ofp_action_group"

        length = "len"
        group_id = "groupId"
    }

    ActionSetQueue{
        type_name = "ofp_action_set_queue"

        length = "len"
        queue_id = "queueId"
    }

    ActionSetMplsTtl{
        type_name = "ofp_action_mpls_ttl"

        length = "len"
        mpls_ttl = "mpls_ttl"
    }

    ActionDecMplsTtl {
        type_name = "ofp_action_dec_mpls_ttl"

        length = "len"
    }

    ActionSetNwTtl {
        type_name = "ofp_action_nw_ttl"

        length = "len"
        nw_ttl = "nw_ttl"
    }

    ActionDecNwTtl {
        type_name = "ofp_action_dec_nw_ttl"

        length = "len"
    }

    ActionCopyTtlOut {
        type_name = "ofp_action_copy_ttl_out"

        length = "len"
    }

    ActionCopyTtlIn {
        type_name = "ofp_action_copy_ttl_in"

        length = "len"
    }

    ActionPushVlan  {
        type_name = "ofp_action_push_vlan"

        length = "len"
        ethertype = "ethertype"
    }

    ActionPushMpls {
        type_name = "ofp_action_push_mpls"

        length = "len"
        ethertype = "ethertype"
    }

    ActionPopVlan {
        type_name = "ofp_action_pop_vlan"
        length = "len"
    }

    ActionPopMpls {
        type_name = "ofp_action_pop_mpls"

        length = "len"
        ethertype = "ethertype"
    }

    ActionPushPbb{
        type_name = "ofp_action_push_pbb"

        length = "len"
        ethertype = "ethertype"
    }

    ActionPopPbb {
        type_name = "ofp_action_pop_pbb"

        length = "len"
    }

    ActionSetField {
        type_name = "ofp_action_set_field"

        length = "len"
        field = "field"
    }

    ActionExperimenter {
        type_name = "ofp_action_experimenter_header"

        length = "len"
        experimenter = "experimenter"
    }

    MultipartRequest{
        type_name = "ofp_multipart_request"

        header = "header"

        flags = "flags"
        body = "body"
    }

    MultipartReply{
        type_name = "ofp_multipart_reply"

        header = "header"

        flags = "flags"
        body = "body"
    }

    SwitchDescription {
        type_name = "ofp_desc"

        mfr_desc = "mfr_desc"
        hw_desc = "hw_desc"
        sw_desc = "sw_desc"
        serial_num = "serial_num"
        dp_desc = "dp_desc"
    }

    SwitchDescriptionRequestBody {
        type_name = "ofp_multipart_desc_request"

    }

    SwitchDescriptionReplyBody{
        type_name = "ofp_multipart_desc_reply"

        value = "desc"
    }

    PortDescriptionRequestBody {
        type_name = "ofp_multipart_port_desc_request"
    }

    PortDescriptionReplyBody {
        type_name = "ofp_multipart_port_desc_reply"

        value = "desc"
    }
}